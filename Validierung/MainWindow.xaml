<Window x:Class="Validierung.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Validierung"
        mc:Ignorable="d"
        Title="MainWindow" Height="463.158" Width="390.789">

    <Window.Resources>
        <!--ErrorTemplates sind ControlTemplates, welche das Element im Falle einer verletzten ValidationRule anzeigt-->
        <ControlTemplate x:Key="ctpError">
            <StackPanel>
                <Border BorderBrush="Red" BorderThickness="2">
                    <!--AdornedElementPlaceholder sind Platzhalterelemente für das ürsprüngliche Element in
                        ErrorTemplates-->
                    <AdornedElementPlaceholder x:Name="aep"/>
                </Border>
                <TextBlock Foreground="Red"
                           Text="{Binding ElementName=aep, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}"/>
            </StackPanel>
        </ControlTemplate>

        <ControlTemplate x:Key="ctpError2">
            <StackPanel>
                <Border BorderBrush="Red" BorderThickness="2" x:Name="bdrAep">
                    <AdornedElementPlaceholder x:Name="aep"/>
                </Border>
                <Popup PlacementTarget="{Binding ElementName=bdrAep}"
                       Placement="Bottom"
                       IsOpen="{Binding ElementName=aep, Path=AdornedElement.IsMouseOver, Mode=OneWay}"
                       AllowsTransparency="True" PopupAnimation="Fade">
                    <TextBlock Text="{Binding ElementName=aep, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}"
                               Foreground="White" Background="Red"/>
                </Popup>
            </StackPanel>
        </ControlTemplate>
    </Window.Resources>

    <Window.DataContext>
        <local:Person/>
    </Window.DataContext>
    
    <StackPanel Margin="10">
        <TextBox x:Name="tbxIpInput" Validation.ErrorTemplate="{StaticResource ctpError}">
            <TextBox.Text>
                <Binding ElementName="tblIpOutput" Path="Text" UpdateSourceTrigger="PropertyChanged">
                    <Binding.ValidationRules>
                        <!--ValidationRules definieren, wann eine Eingabe durch den Benutzer eine zulässige Eingabe ist und
                        geben das Ergebnis dieser Prüfung an die GUI zurück. Im False-Fall wird gegebenenfalls ein ErrorTemplate
                        angezeigt. ValidationsRules werden als C#-Klasse abgelegt.-->
                        <local:Ipv4Validierung/>
                    </Binding.ValidationRules>
                </Binding>
            </TextBox.Text>
        </TextBox>
        <TextBlock x:Name="tblIpOutput"/>

        <!--Mit der Property ValidatesOnExceptions können vom CodeBehind geworfene Exceptions als ValidierungsFall von der GUI aufgefangen werden-->
        <TextBox x:Name="tbxName"
                 Text="{Binding Name, UpdateSourceTrigger=PropertyChanged, ValidatesOnExceptions=True}"
                 Validation.ErrorTemplate="{StaticResource ctpError2}"/>
        <!--Mit der Property ValidatesOnDataErrors können durch bestimmte Interfaces direkt in der Datenklasse ValidierungsFälle definiert werden-->
        <TextBox x:Name="tbxAlter"
                 Text="{Binding Alter, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"
                 Validation.ErrorTemplate="{StaticResource ctpError2}"/>
        
        <Button Content="OK">
            <Button.Style>
                <Style TargetType="Button">
                    <Setter Property="IsEnabled" Value="False"/>
                    <Style.Triggers>
                        <!--Mittels des folgende MultiDataTrigger wird überprüft, ob ein Validierungsfehler vorliegt,
                        und gegebenenfalls der OK-Button gesperrt-->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding ElementName=tbxIpInput, Path=(Validation.HasError)}" Value="False"/>
                                <Condition Binding="{Binding ElementName=tbxName, Path=(Validation.HasError)}" Value="False"/>
                                <Condition Binding="{Binding ElementName=tbxAlter, Path=(Validation.HasError)}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="IsEnabled" Value="True"/>
                        </MultiDataTrigger>
                    </Style.Triggers>
                </Style>
            </Button.Style>
        </Button>
    </StackPanel>
</Window>
